# Find the number of homes remodeled by year (yearremodeled)
# ... save this to a data frame and call the count of remodeled homes "remodels"
remodels <- homes %>%
filter(yearremodeled > 1800) %>%
group_by(yearremodeled) %>%
summarize(remodels = n())
# Plot the result
ggplot(remodels, aes(x = yearremodeled, y = remodels)) + geom_line()
?annotate
# Plot the result
ggplot(remodels, aes(x = yearremodeled, y = remodels)) + geom_line()
# What are the peak years?
remodels %>%
filter(remodels > 100)
# Find the number of homes remodeled by year (yearremodeled)
# ... save this to a data frame and call the count of remodeled homes "year_count"
remodels <- homes %>%
filter(yearremodeled > 1800) %>%
group_by(yearremodeled) %>%
summarize(year_count = n())
# Plot the result
ggplot(remodels, aes(x = yearremodeled, y = year_count)) + geom_line()
# What are the peak years?
remodels %>%
filter(year_count > 100)
library(ggplot2)
library(tidyverse)
library(plotly)
library(scales)
library("GGally")
library(ISLR)
library(gridExtra)
library(broom)
print(paste("High Cooks Value:", 2/sqrt(nrow(Auto))))
print(paste("High Cooks Value:", 4/nrow(Auto)))
print(paste("High Leverage Value:", 4/nrow(Auto)))
print(paste("High Leverage Value:", 2/sqrt(nrow(Auto)))
print(paste("High Leverage Value:", 2/sqrt(nrow(Auto))))
set.seed (1)
x1=runif(100) #Generates random compositions with a uniform distribution on the (rcomp) simplex.
x2 =0.5* x1+rnorm(100) /10
y=2+2* x1 +0.3* x2+rnorm(100)
par(c(2,2))
boxplot(x1)
boxplot(x2)
boxplot(y)
pars(c(2,2))
par(mfrow=c(2,2))
boxplot(x1)
boxplot(x2)
boxplot(y)
par(mfrow=c(2,2))
boxplot(x1, title='x1')
boxplot(x2)
boxplot(y)
par(mfrow=c(2,2))
boxplot(x1, main='x1')
boxplot(x2)
boxplot(y)
par(mfrow=c(2,2))
boxplot(x1, main='x1')
boxplot(x2, main='x2')
boxplot(y, main='y')
par(mfrow=c(2,2))
boxplot(x1, main='x1', ylim = c(0, 1))
boxplot(x2, main='x2', ylim = c(0, 1))
boxplot(y, main='y', ylim = c(0, 7))
par(mfrow=c(2,2))
boxplot(x1, main='x1', ylim = c(0, 1))
boxplot(x2, main='x2', ylim = c(-1, 1))
boxplot(y, main='y', ylim = c(-1, 7))
par(mfrow=c(2,2))
boxplot(x1, main='x1', ylim = c(0, 1))
boxplot(x2, main='x2', ylim = c(-0.1, 1))
boxplot(y, main='y', ylim = c(-0.1, 7))
view(x2)
par(mfrow=c(2,2))
boxplot(x1, main='x1', ylim = c(0, 1))
boxplot(x2, main='x2', ylim = c(-0.1, 1))
boxplot(y, main='y', ylim = c(-0.1, 7))
x1=c(x1 , 0.1)
x2=c(x2 , 0.8)
y=c(y,6)
lm.x1.x2 = lm(y~x1+x2)
summary(lm.x1.x2)
confint(lm.x1.x2)
lm.x1 = lm(y~x1)
summary(lm.x1)
confint(lm.x1)
lm.x2 = lm(y~x2)
summary(lm.x2)
confint(lm.x2)
view(x2)
par(mfrow=c(2,2))
boxplot(x1, main='x1', ylim = c(0, 1))
boxplot(x2, main='x2', ylim = c(-0.1, 1))
boxplot(y, main='y', ylim = c(-0.1, 7))
#view(x2)
par(mfrow=c(2,2))
boxplot(x1, main='x1', ylim = c(0, 1))
boxplot(x2, main='x2', ylim = c(-0.2, 1))
boxplot(y, main='y', ylim = c(-0.2, 7))
knitr::opts_chunk$set(error=TRUE,        # Keep compiling upon error
collapse=FALSE,    # collapse by default
echo=TRUE,         # echo code by default
comment = "#>",    # change comment character
fig.width = 5.5,     # set figure width
fig.align = "center",# set figure position
out.width = "49%", # set width of displayed images
warning=FALSE,     # do not show R warnings
message=FALSE)     # do not show R messages
library(ggplot2)
library(tidyverse)
library(plotly)
library(scales)
library("GGally")
library(ISLR)
library(gridExtra)
library(broom)
head(Auto)
#view(Auto)
ggpairs(Auto[-9], lower = list(continuous = "points", combo = "dot_no_facet"), progress = F)
cor(Auto[,-9])
lm.model.all  = lm(mpg~.-name, data=Auto)
summary(lm.model.all)
# From Module 2 Lab, the Residual Plot
scatterall <- function(lm.fit){
lm.fit %>%
ggplot(aes(.fitted, .resid)) + geom_point() +
stat_smooth(method="loess") +
geom_hline(yintercept=0, col="red", linetype="dashed") +
labs(x="Fitted values", y="Residuals", title="Residual vs Fitted Plot") +
theme_bw()
}
# From Module 2 lab and Tidyverse website, the qq plot # https://ggplot2.tidyverse.org/reference/geom_qq.html
q_q <- function(lm.model.fit){
lm.model.fit %>% augment() %>% # augment adds the standardized residuals that we need
ggplot(aes(sample=.std.resid)) +
stat_qq() + stat_qq_line() +
labs(x="Theoretical Quantiles", y="Sample Quantiles", title="Q-Q Plot") +
theme_bw()
}
# From Module 2 lab the residual vs. leverage
# https://rpubs.com/therimalaya/43190
resVlev <- function(lm.model.fit){
lm.model.fit %>% augment() %>% rownames_to_column() %>% # augment gives us residuals and hat values
ggplot(aes(.hat,.std.resid, label=rowname)) + # hat values and residuals
geom_point(aes(size=.cooksd), na.rm=TRUE) +
stat_smooth(method="loess", na.rm=TRUE) +
scale_x_continuous(name="Leverage") +
scale_y_continuous(name="Standardized Residuals") +
ggtitle("Residual vs Leverage Plot") +
theme_bw() + theme(legend.position="bottom")
}
# Cooks Distance For Influential Data Points
#A general rule of thumb is that any point with a Cook’s Distance over 4/n (where n is the total number of data points) is considered to be an outlier.
cookVals <- function(lm.fit) {
lm.fit %>% augment() %>%
ggplot(aes(seq_along(.cooksd), .cooksd))+
geom_bar(stat="identity", position="identity") +
labs(x="Obs. Number", y=TeX("Cook's distance"),
title="Cook's Distance - Influential Data Points") + theme_bw()
}
# plot the hat values by their sequence in the observations ??????
hatVals <- lm.model.all %>% augment() %>%
ggplot(aes(seq_along(.hat), .hat))+
geom_bar(stat="identity", position="identity") +
labs(x="Obs. Number", y=TeX("Hat values"),
title="Hat values") + theme_bw()
grid.arrange(scatterall(lm.model.all), q_q(lm.model.all), cookVals(lm.model.all), resVlev(lm.model.all),
widths=c(1,1),
layout_matrix = rbind(c(1, 2),
c(3, 3),
c(4, 4),
c(5,5)))
print(paste("High Leverage Value:", 2/sqrt(nrow(Auto))))
which.max(hatvalues(lm.model.all))
#lm.model.int.w.c = lm(mpg~.-name+(weight*cylinders), data=Auto)
#lm.model.int.w.c = lm(mpg~.-name-acceleration+(weight*cylinders), data=Auto)
lm.model.int.w.c = lm(mpg~.-name-acceleration+(weight*cylinders)+(year*cylinders), data=Auto)
summary(lm.model.int.w.c)
#lm.model.int.trans = lm(mpg~.-name-acceleration+(weight*cylinders)+(year*cylinders), data=Auto)
#lm.model.int.trans = lm(mpg~.-name-acceleration-displacement+(year*cylinders)+I(weight^2), data=Auto)
lm.model.int.trans = lm(mpg~.-name-acceleration-displacement+(year*cylinders)+I(weight^2)+I(horsepower^2), data=Auto)
summary(lm.model.int.trans)
grid.arrange(scatterall(lm.model.int.trans), q_q(lm.model.int.trans), cookVals(lm.model.int.trans), resVlev(lm.model.int.trans),
widths=c(1,1),
layout_matrix = rbind(c(1, 2),
c(3, 3),
c(4, 4),
c(5,5)))
set.seed (1)
x1=runif(100) #Generates random compositions with a uniform distribution on the (rcomp) simplex.
x2 =0.5* x1+rnorm(100) /10
y=2+2* x1 +0.3* x2+rnorm(100)
plot(x1,x2)
lm.x1.x2 = lm(y~x1+x2)
summary(lm.x1.x2)
confint(lm.x1.x2)
lm.x1 = lm(y~x1)
summary(lm.x1)
confint(lm.x1)
lm.x2 = lm(y~x2)
summary(lm.x2)
confint(lm.x2)
x1=c(x1 , 0.1)
x2=c(x2 , 0.8)
y=c(y,6)
lm.x1.x2 = lm(y~x1+x2)
summary(lm.x1.x2)
confint(lm.x1.x2)
lm.x1 = lm(y~x1)
summary(lm.x1)
confint(lm.x1)
lm.x2 = lm(y~x2)
summary(lm.x2)
confint(lm.x2)
#view(x2)
par(mfrow=c(2,2))
boxplot(x1, main='x1', ylim = c(0, 1))
boxplot(x2, main='x2', ylim = c(-0.2, 1))
boxplot(y, main='y', ylim = c(-0.2, 7))
print(which.max(hatvalues(lm.x1.x2)))
print(paste("Min x1: ",min(x1), " Max x1: ", max(x1), " Min x2: ", min(x2), " Max x2: ", max(x2), "Min y: ", min(y), "Max y: ", max(y)))
resVlev(lm.x1.x2)
library(MASS)
dfBoston = Boston
head(dfBoston)
dfBoston$chas <- factor(dfBoston$chas)
# create vectors of the of outcomes
out_star = 2
out_end = 14
out_nvar = out_end - out_start+1
library(ggplot2)
library(tidyverse)
library(plotly)
library(scales)
library("GGally")
library(ISLR)
library(gridExtra)
library(broom)
knitr::opts_chunk$set(error=TRUE,        # Keep compiling upon error
collapse=FALSE,    # collapse by default
echo=TRUE,         # echo code by default
comment = "#>",    # change comment character
fig.width = 5.5,     # set figure width
fig.align = "center",# set figure position
out.width = "49%", # set width of displayed images
warning=FALSE,     # do not show R warnings
message=FALSE)     # do not show R messages
library(ggplot2)
library(tidyverse)
library(plotly)
library(scales)
library("GGally")
library(ISLR)
library(gridExtra)
library(broom)
head(Auto)
#view(Auto)
ggpairs(Auto[-9], lower = list(continuous = "points", combo = "dot_no_facet"), progress = F)
cor(Auto[,-9])
lm.model.all  = lm(mpg~.-name, data=Auto)
summary(lm.model.all)
# From Module 2 Lab, the Residual Plot
scatterall <- function(lm.fit){
lm.fit %>%
ggplot(aes(.fitted, .resid)) + geom_point() +
stat_smooth(method="loess") +
geom_hline(yintercept=0, col="red", linetype="dashed") +
labs(x="Fitted values", y="Residuals", title="Residual vs Fitted Plot") +
theme_bw()
}
# From Module 2 lab and Tidyverse website, the qq plot # https://ggplot2.tidyverse.org/reference/geom_qq.html
q_q <- function(lm.model.fit){
lm.model.fit %>% augment() %>% # augment adds the standardized residuals that we need
ggplot(aes(sample=.std.resid)) +
stat_qq() + stat_qq_line() +
labs(x="Theoretical Quantiles", y="Sample Quantiles", title="Q-Q Plot") +
theme_bw()
}
# From Module 2 lab the residual vs. leverage
# https://rpubs.com/therimalaya/43190
resVlev <- function(lm.model.fit){
lm.model.fit %>% augment() %>% rownames_to_column() %>% # augment gives us residuals and hat values
ggplot(aes(.hat,.std.resid, label=rowname)) + # hat values and residuals
geom_point(aes(size=.cooksd), na.rm=TRUE) +
stat_smooth(method="loess", na.rm=TRUE) +
scale_x_continuous(name="Leverage") +
scale_y_continuous(name="Standardized Residuals") +
ggtitle("Residual vs Leverage Plot") +
theme_bw() + theme(legend.position="bottom")
}
# Cooks Distance For Influential Data Points
#A general rule of thumb is that any point with a Cook’s Distance over 4/n (where n is the total number of data points) is considered to be an outlier.
cookVals <- function(lm.fit) {
lm.fit %>% augment() %>%
ggplot(aes(seq_along(.cooksd), .cooksd))+
geom_bar(stat="identity", position="identity") +
labs(x="Obs. Number", y=TeX("Cook's distance"),
title="Cook's Distance - Influential Data Points") + theme_bw()
}
# plot the hat values by their sequence in the observations ??????
hatVals <- lm.model.all %>% augment() %>%
ggplot(aes(seq_along(.hat), .hat))+
geom_bar(stat="identity", position="identity") +
labs(x="Obs. Number", y=TeX("Hat values"),
title="Hat values") + theme_bw()
grid.arrange(scatterall(lm.model.all), q_q(lm.model.all), cookVals(lm.model.all), resVlev(lm.model.all),
widths=c(1,1),
layout_matrix = rbind(c(1, 2),
c(3, 3),
c(4, 4),
c(5,5)))
print(paste("High Leverage Value:", 2/sqrt(nrow(Auto))))
which.max(hatvalues(lm.model.all))
#lm.model.int.w.c = lm(mpg~.-name+(weight*cylinders), data=Auto)
#lm.model.int.w.c = lm(mpg~.-name-acceleration+(weight*cylinders), data=Auto)
lm.model.int.w.c = lm(mpg~.-name-acceleration+(weight*cylinders)+(year*cylinders), data=Auto)
summary(lm.model.int.w.c)
#lm.model.int.trans = lm(mpg~.-name-acceleration+(weight*cylinders)+(year*cylinders), data=Auto)
#lm.model.int.trans = lm(mpg~.-name-acceleration-displacement+(year*cylinders)+I(weight^2), data=Auto)
lm.model.int.trans = lm(mpg~.-name-acceleration-displacement+(year*cylinders)+I(weight^2)+I(horsepower^2), data=Auto)
summary(lm.model.int.trans)
grid.arrange(scatterall(lm.model.int.trans), q_q(lm.model.int.trans), cookVals(lm.model.int.trans), resVlev(lm.model.int.trans),
widths=c(1,1),
layout_matrix = rbind(c(1, 2),
c(3, 3),
c(4, 4),
c(5,5)))
set.seed (1)
x1=runif(100) #Generates random compositions with a uniform distribution on the (rcomp) simplex.
x2 =0.5* x1+rnorm(100) /10
y=2+2* x1 +0.3* x2+rnorm(100)
plot(x1,x2)
lm.x1.x2 = lm(y~x1+x2)
summary(lm.x1.x2)
confint(lm.x1.x2)
lm.x1 = lm(y~x1)
summary(lm.x1)
confint(lm.x1)
lm.x2 = lm(y~x2)
summary(lm.x2)
confint(lm.x2)
x1=c(x1 , 0.1)
x2=c(x2 , 0.8)
y=c(y,6)
lm.x1.x2 = lm(y~x1+x2)
summary(lm.x1.x2)
confint(lm.x1.x2)
lm.x1 = lm(y~x1)
summary(lm.x1)
confint(lm.x1)
lm.x2 = lm(y~x2)
summary(lm.x2)
confint(lm.x2)
lm.x2 = lm(y~x2)
summary(lm.x2)
confint(lm.x2)
#view(x2)
par(mfrow=c(2,2))
boxplot(x1, main='x1', ylim = c(0, 1))
boxplot(x2, main='x2', ylim = c(-0.2, 1))
boxplot(y, main='y', ylim = c(-0.2, 7))
print(which.max(hatvalues(lm.x1.x2)))
print(paste("Min x1: ",min(x1), " Max x1: ", max(x1), " Min x2: ", min(x2), " Max x2: ", max(x2), "Min y: ", min(y), "Max y: ", max(y)))
resVlev(lm.x1.x2)
library(MASS)
dfBoston = Boston
head(dfBoston)
dfBoston$chas <- factor(dfBoston$chas)
# create vectors of the of outcomes
out_star = 2
out_end = 14
out_nvar = out_end - out_start+1
# create vectors of the of outcomes
out_start = 2
out_end = 14
out_nvar = out_end - out_start+1
out_variable = rep(NA, out_nvar)
out_beta = rep(NA, out_nvar)
out_se = rep(NA, out_nvar)
out_pvalue = rep(NA, out_nvar)
for (i in out_start:out_end){
predictor = colnames(dfBoston)[i]
model = lm(crim ~ get(predictor), data=dfBoston)
Vcov = vcov(model, useScale = FALSE)
beta = coef(model)
se = sqrt(diag(Vcov))
zval = beta / se
pval <- 2 * pnorm(abs(zval), lower.tail = FALSE)
#print(pval)
#print(paste("Vcov", i, ": ", Vcov))
#print(paste("beta: ", beta))
#print(paste("se: ", se))
#print(paste("zval: ", zval))
#print(paste("pval: ", pval))
out_beta[i] = as.numeric(beta[2])
out_se[i] = as.numeric(se[2])
out_pvalue[i] = as.numeric(pval[2])
out_variable[i] = predictor
#number = number + 1
}
outcome = data.frame(out_variable, out_beta, out_se, out_pvalue)
outcome
ggpairs(dfBoston, lower = list(continuous = "points", combo = "dot_no_facet"), progress = F)
lm.model.all = lm(crim~.,data=dfBoston)
summary(lm.model.all)
# create the vectors with the coefficients
slr_betas = out_beta[2:14]
print(slr_betas)
mlr_betas = as.numeric(coef(lm.model.all)[c(2,3,4,5,6,7,8,9,10,11,12,13,14)])
print(mlr_betas)
plot(mlr_betas~slr_betas)
# create vectors of the of outcomes
out_start = 2
out_end = 14
out_nvar = out_end - out_start+1
out_variable = rep(NA, out_nvar)
out_beta = rep(NA, out_nvar)
out_se = rep(NA, out_nvar)
out_pvalue = rep(NA, out_nvar)
for (i in out_start:out_end){
if (i != 4){
predictor = colnames(dfBoston)[i]
model = lm(crim ~ get(predictor) + I(get(predictor)^2) + I(get(predictor)^3) , data=dfBoston)
df <- fortify(model)
print(ggplot(df, aes(x = .fitted, y = .resid)) + geom_point() + ggtitle(paste(predictor, "Residual vs Leverage Plot")))
Vcov = vcov(model, useScale = FALSE)
beta = coef(model)
se = sqrt(diag(Vcov))
zval = beta / se
pval <- 2 * pnorm(abs(zval), lower.tail = FALSE)
#print(pval)
#print(paste("Vcov", i, ": ", Vcov))
#print(paste("beta: ", beta))
#print(paste("se: ", se))
#print(paste("zval: ", zval))
#print(paste("pval: ", pval))
out_beta[i] = as.numeric(beta[2])
out_se[i] = as.numeric(se[2])
out_pvalue[i] = as.numeric(pval[2])
out_variable[i] = predictor
#number = number + 1
}
}
outcome = data.frame(out_variable, out_beta, out_se, out_pvalue)
outcome
install.packages(c("afex", "backports", "BH", "brio", "broom", "cachem", "caTools", "cli", "collapse", "colorspace", "cpp11", "crayon", "crosstalk", "data.table", "DBI", "dbplyr", "diffobj", "dplyr", "fansi", "fastmap", "forcats", "glmnet", "gplots", "Hmisc", "hms", "httpuv", "isoband", "janitor", "jsonlite", "knitr", "lfe", "lifecycle", "lme4", "lubridate", "magrittr", "MASS", "matrixStats", "mime", "multcomp", "pbkrtest", "pillar", "pkgbuild", "processx", "promises", "ps", "quantreg", "rappdirs", "rbibutils", "Rcpp", "RcppArmadillo", "RcppEigen", "Rdpack", "reprex", "rgl", "rmarkdown", "rprojroot", "rstudioapi", "sp", "statsr", "testthat", "tibble", "tinytex", "waldo", "withr", "xfun"))
install.packages(c("afex", "backports", "BH", "brio", "broom", "cachem", "caTools", "cli", "collapse", "colorspace", "cpp11", "crayon", "crosstalk", "data.table", "DBI", "dbplyr", "diffobj", "dplyr", "fansi", "fastmap", "forcats", "glmnet", "gplots", "Hmisc", "hms", "httpuv", "isoband", "janitor", "jsonlite", "knitr", "lfe", "lifecycle", "lme4", "lubridate", "magrittr", "MASS", "matrixStats", "mime", "multcomp", "pbkrtest", "pillar", "pkgbuild", "processx", "promises", "ps", "quantreg", "rappdirs", "rbibutils", "Rcpp", "RcppArmadillo", "RcppEigen", "Rdpack", "reprex", "rgl", "rmarkdown", "rprojroot", "rstudioapi", "sp", "statsr", "testthat", "tibble", "tinytex", "waldo", "withr", "xfun"))
install.packages(c("afex", "backports", "BH", "brio", "broom", "cachem", "caTools", "cli", "collapse", "colorspace", "cpp11", "crayon", "crosstalk", "data.table", "DBI", "dbplyr", "diffobj", "dplyr", "fansi", "fastmap", "forcats", "glmnet", "gplots", "Hmisc", "hms", "httpuv", "isoband", "janitor", "jsonlite", "knitr", "lfe", "lifecycle", "lme4", "lubridate", "magrittr", "MASS", "matrixStats", "mime", "multcomp", "pbkrtest", "pillar", "pkgbuild", "processx", "promises", "ps", "quantreg", "rappdirs", "rbibutils", "Rcpp", "RcppArmadillo", "RcppEigen", "Rdpack", "reprex", "rgl", "rmarkdown", "rprojroot", "rstudioapi", "sp", "statsr", "testthat", "tibble", "tinytex", "waldo", "withr", "xfun"))
install.packages(c("afex", "backports", "BH", "brio", "broom", "cachem", "caTools", "cli", "collapse", "colorspace", "cpp11", "crayon", "crosstalk", "data.table", "DBI", "dbplyr", "diffobj", "dplyr", "fansi", "fastmap", "forcats", "glmnet", "gplots", "Hmisc", "hms", "httpuv", "isoband", "janitor", "jsonlite", "knitr", "lfe", "lifecycle", "lme4", "lubridate", "magrittr", "MASS", "matrixStats", "mime", "multcomp", "pbkrtest", "pillar", "pkgbuild", "processx", "promises", "ps", "quantreg", "rappdirs", "rbibutils", "Rcpp", "RcppArmadillo", "RcppEigen", "Rdpack", "reprex", "rgl", "rmarkdown", "rprojroot", "rstudioapi", "sp", "statsr", "testthat", "tibble", "tinytex", "waldo", "withr", "xfun"))
install.packages(c("afex", "backports", "BH", "brio", "broom", "cachem", "caTools", "cli", "collapse", "colorspace", "cpp11", "crayon", "crosstalk", "data.table", "DBI", "dbplyr", "diffobj", "dplyr", "fansi", "fastmap", "forcats", "glmnet", "gplots", "Hmisc", "hms", "httpuv", "isoband", "janitor", "jsonlite", "knitr", "lfe", "lifecycle", "lme4", "lubridate", "magrittr", "MASS", "matrixStats", "mime", "multcomp", "pbkrtest", "pillar", "pkgbuild", "processx", "promises", "ps", "quantreg", "rappdirs", "rbibutils", "Rcpp", "RcppArmadillo", "RcppEigen", "Rdpack", "reprex", "rgl", "rmarkdown", "rprojroot", "rstudioapi", "sp", "statsr", "testthat", "tibble", "tinytex", "waldo", "withr", "xfun"))
install.packages(c("afex", "backports", "BH", "brio", "broom", "cachem", "caTools", "cli", "collapse", "colorspace", "cpp11", "crayon", "crosstalk", "data.table", "DBI", "dbplyr", "diffobj", "dplyr", "fansi", "fastmap", "forcats", "glmnet", "gplots", "Hmisc", "hms", "httpuv", "isoband", "janitor", "jsonlite", "knitr", "lfe", "lifecycle", "lme4", "lubridate", "magrittr", "MASS", "matrixStats", "mime", "multcomp", "pbkrtest", "pillar", "pkgbuild", "processx", "promises", "ps", "quantreg", "rappdirs", "rbibutils", "Rcpp", "RcppArmadillo", "RcppEigen", "Rdpack", "reprex", "rgl", "rmarkdown", "rprojroot", "rstudioapi", "sp", "statsr", "testthat", "tibble", "tinytex", "waldo", "withr", "xfun"))
install.packages(c("afex", "backports", "BH", "brio", "broom", "cachem", "caTools", "cli", "collapse", "colorspace", "cpp11", "crayon", "crosstalk", "data.table", "DBI", "dbplyr", "diffobj", "dplyr", "fansi", "fastmap", "forcats", "glmnet", "gplots", "Hmisc", "hms", "httpuv", "isoband", "janitor", "jsonlite", "knitr", "lfe", "lifecycle", "lme4", "lubridate", "magrittr", "MASS", "matrixStats", "mime", "multcomp", "pbkrtest", "pillar", "pkgbuild", "processx", "promises", "ps", "quantreg", "rappdirs", "rbibutils", "Rcpp", "RcppArmadillo", "RcppEigen", "Rdpack", "reprex", "rgl", "rmarkdown", "rprojroot", "rstudioapi", "sp", "statsr", "testthat", "tibble", "tinytex", "waldo", "withr", "xfun"))
install.packages(c("afex", "backports", "BH", "brio", "broom", "cachem", "caTools", "cli", "collapse", "colorspace", "cpp11", "crayon", "crosstalk", "data.table", "DBI", "dbplyr", "diffobj", "dplyr", "fansi", "fastmap", "forcats", "glmnet", "gplots", "Hmisc", "hms", "httpuv", "isoband", "janitor", "jsonlite", "knitr", "lfe", "lifecycle", "lme4", "lubridate", "magrittr", "MASS", "matrixStats", "mime", "multcomp", "pbkrtest", "pillar", "pkgbuild", "processx", "promises", "ps", "quantreg", "rappdirs", "rbibutils", "Rcpp", "RcppArmadillo", "RcppEigen", "Rdpack", "reprex", "rgl", "rmarkdown", "rprojroot", "rstudioapi", "sp", "statsr", "testthat", "tibble", "tinytex", "waldo", "withr", "xfun"))
install.packages(c("afex", "backports", "BH", "brio", "broom", "cachem", "caTools", "cli", "collapse", "colorspace", "cpp11", "crayon", "crosstalk", "data.table", "DBI", "dbplyr", "diffobj", "dplyr", "fansi", "fastmap", "forcats", "glmnet", "gplots", "Hmisc", "hms", "httpuv", "isoband", "janitor", "jsonlite", "knitr", "lfe", "lifecycle", "lme4", "lubridate", "magrittr", "MASS", "matrixStats", "mime", "multcomp", "pbkrtest", "pillar", "pkgbuild", "processx", "promises", "ps", "quantreg", "rappdirs", "rbibutils", "Rcpp", "RcppArmadillo", "RcppEigen", "Rdpack", "reprex", "rgl", "rmarkdown", "rprojroot", "rstudioapi", "sp", "statsr", "testthat", "tibble", "tinytex", "waldo", "withr", "xfun"))
install.packages("ROSE")
library("ROSE")
library("ROSE")
install.packages("caret")
library("ROSE")
library(caret)
library("ROSE")
library(caret)
# method: The resampling method
# number: number of folds for cross validation
ctrl <- trainControl(method = "repeatedcv",
number = 10,
repeats = 10,
verboseIter = FALSE,
sampling = "rose")
set.seed(42)
# method: regression model to use
# for logistic I selected glmnet
# no pre-processing is needed
model_log_rose <- caret::train(ClassBinary ~ Blue+Red+Green,
data = haitiBinary,
method = "glmnet",
#preProcess = c("scale", "center"),
trControl = ctrl)
knitr::opts_chunk$set(error=TRUE,        # Keep compiling upon error
collapse=FALSE,    # collapse by default
echo=TRUE,         # echo code by default
comment = "#>",    # change comment character
fig.width = 5.5,     # set figure width
fig.align = "center",# set figure position
out.width = "49%", # set width of displayed images
warning=TRUE,      # show R warnings
message=TRUE)      # show R messages
#install.packages("pROC")
#install.packages("randomForest")
#install.packages("reticulate")
# Load Required Packages
library(tidyverse)
# Load Required Packages
library(tidyverse)
library(pROC)
library(randomForest)
library(GGally)
# Load Required Packages
library(tidyverse)
library(pROC)
library(randomForest)
library("GGally")
# Load Required Packages
library(tidyverse)
library(pROC)
library(randomForest)
#library("GGally")
library(gridExtra)
library(plotly)
