filter(is.na(source.x)) %>%
select(Owner:Cards)
View(in_parcel)
# many with 0 improvements (or missing), how many?
in_parcel %>%
filter(ImprovementsValue == 0 | is.na(ImprovementsValue)) %>%
tally()
# records in cards only
in_cards <- homes %>%
filter(is.na(source.y)) %>%
select(TMP:TotalRooms)
View(in_cards)
# mostly vacant residential land or use is missing
# keep only records in both cards and parcels
# drop source
homes <- homes %>%
filter(!is.na(source.y) & !is.na(source.x)) %>%
select(-c(source.y, source.x))
# fix names
names(homes) <- tolower(names(homes))
# and make a copy in case we mess something up or want to reference the full set
homes_copy <- homes
rm(in_parcel, in_cards)
table(homes$usecode)
# identify residential home records with usecode
res <- c("Doublewide", "Duplex", "Mobile Homes",
"Rental House", "Single Family", "Single Family-Rental"
)
homes <- homes %>%
filter(usecode %in% res)
# b. examine key variables: totalvalue, finsqft, lotsize
# totalvalue
summary(homes$totalvalue) # 2 NAs, some 0s, and more than 200M at max
homes %>%  # check NAs
filter(is.na(totalvalue)) %>%
select(cardtype, usecode, finsqft, lotsize, landvalue, improvementsvalue, totalvalue)
homes %>% # check 0s
filter(totalvalue == 0) %>%
select(cardtype, usecode, finsqft, lotsize, landvalue, improvementsvalue)
# remove the rows with TotalValue 0 or NA
homes <- homes %>%
filter(!is.na(totalvalue) & totalvalue > 0)
ggplot(homes, aes(x = totalvalue)) + geom_histogram()
ggplot(homes, aes(log(totalvalue))) + geom_histogram()
# finsqft
summary(homes$finsqft) # 9 NAs, some 0s, and up to nearly 20K sqft
tmp <- homes %>% # check NAs (I want to see the full Owner/Name so save in tmp data frame)
filter(is.na(finsqft)) %>%
select(yearbuilt, usecode, finsqft, totalrooms, owner, lotsize, propname, landvalue, improvementsvalue, totalvalue)
# some commercial, all duplex/rental (remove below)
tmp <- homes %>% # check 0s
filter(finsqft == 0) %>%
select(yearbuilt, usecode, finsqft, totalrooms, owner, lotsize, propname, landvalue, improvementsvalue, totalvalue) %>%
arrange(desc(improvementsvalue))
# outside of the first 100+, most don't seem to have improvements valued highly enough to be a home (remove below)
# how many with home-priced improvementsvalue?
tmp %>%
filter(improvementsvalue > 75000) %>%
tally()
# check the high end
tmp <- homes %>%
filter(finsqft > 5000) %>%
select(yearbuilt, usecode, finsqft, totalrooms, owner, city, lotsize:totalvalue, cards) %>%
arrange(desc(finsqft)) # limit this, e.g, < 10K
# remove rows with FinSqFt >= 10000
homes <- homes %>%
filter(!is.na(finsqft) & finsqft > 0 & finsqft < 10000)
ggplot(homes, aes(x = finsqft)) + geom_histogram(binwidth = 100)
# lotsize
summary(homes$lotsize)
tmp <- homes %>% # check 0s
filter(lotsize == 0) %>%
arrange(finsqft)
# mostly condos/townhouses, keep
tmp <- homes %>%  # check high end
filter(lotsize > 250) %>%
arrange(desc(lotsize))
# mostly farms (also golf course, school, ashlawn, etc.)
# ... many with mutiple properties on one assessment
# remove records with 2 or more cards associated with parcel
homes <- homes %>%
filter(cards < 2)
ggplot(homes, aes(lotsize)) + geom_histogram()
ggplot(filter(homes, lotsize > 0), aes(log(lotsize))) + geom_histogram()
# improvementsvalue
summary(homes$improvementsvalue) # no missing, some 0s
# create a tmp file with ImprovementsValue == 0, arrange the file by FinSqFt
tmp <- homes %>%
filter(improvementsvalue == 0) %>%
arrange(finsqft)
View(tmp)
View(tmp)
# landvalue
summary(homes$landvalue)
homes %>% # check 0s
filter(landvalue == 0) %>%
select(usecode, owner, finsqft, lotsize, improvementsvalue, totalvalue)
# remove the rows with landvalue = 0
homes <- homes %>%
filter(landvalue > 0)
ggplot(homes, aes(landvalue)) + geom_histogram()
ggplot(homes, aes(log(landvalue))) + geom_histogram()
# cardtype
table(homes$cardtype)
homes %>%
filter(cardtype == "C") %>%
select(yearbuilt, usecode, finsqft, totalrooms, owner, improvementsvalue)
homes <- homes %>% filter(cardtype == "R") %>% # keep only R
select(-cardtype) # and remove column
# usecode
table(homes$usecode) # consider reducing to just single family...
# numstories
table(homes$numstories) # realize I don't know what this means; was expecting 1, 2, 3, etc.. Let's drop it
homes <- homes %>% select(-numstories)
# bedroom, fullbath, halfbath, totalrooms
table(homes$bedroom) # 228 homes with no bedroom seems high, use with caution
table(homes$fullbath) # 263 homes with no full bath seems high, use with caution
table(homes$halfbath) # ok
table(homes$totalrooms) # 1310 homes with no rooms is definitely a coding error, use with caution
# zip
summary(homes$zip) # 256 missing
table(homes$city, homes$zip) # basically replicates City
# landusevalue
summary(homes$landusevalue)
homes <- homes %>% # create binary indicator for land use
mutate(landuse = if_else(landusevalue > 0, 1, 0)) %>%
select(-landusevalue) # remove variable
table(homes$landuse)
# subdivision
table(homes$subdivision) # would need more work and understanding to be useful
sum(is.na(homes$subdivision)) # 9,393 missing; is it reasonable to consider these more rural?
homes <- homes %>%
mutate(insub = if_else(is.na(subdivision), 0, 1)) %>%
select(-subdivision)
# lastsaleprice, lastsaledate**
summary(homes$lastsaledate)
tmp <- homes %>%
filter(lastsaleprice == 0) %>%
arrange(lastsaledate) # last sale date is prior to year built for many
homes %>%
mutate(datecheck = if_else(yearbuilt > as.integer(year(lastsaledate)), 1, 0)) %>%
filter(datecheck == 1 | yearbuilt == 0) %>%
tally()
library(lubridate)
homes %>%
mutate(datecheck = if_else(yearbuilt > as.integer(year(lastsaledate)), 1, 0)) %>%
filter(datecheck == 1 | yearbuilt == 0) %>%
tally()
## YOUR TURN:
# How many homes were remodeled (yearremodeled)
homes %>% filter(yearremodeled > 0) %>% tally()
# Create a binary variable (remodel) that indicates if a home has been remodeled
homes <- homes %>%
mutate(remode = if_else(yearremodeled > 0, 1, 0))
library(tidyverse)
library(lubridate)
library(tidyverse)
# a.  read in card level data and have a peek
card_level <- read_csv("CAMA_CardLevelData.txt")
# a.  read in card level data and have a peek
card_level <- read_csv("CAMA_CardLevelData.txt")
str(card_level)
summary(card_level)
# list of variables to keep
vars <- c("TMP", "CardNum", "CardType", "YearBuilt", "YearRemodeled", "UseCode",
"Condition", "NumStories", "FinSqFt", "Cooling", "FP_Num",
"Bedroom", "FullBath", "HalfBath", "TotalRooms"
)
# select listed variables, add variable for source
card <- card_level %>%
select(vars) %>%
mutate(source = "card")
# b. read in parcel level data and have a peek
parcel_level <- read_csv("CAMA_ParcelInfo.txt")
str(parcel_level)
summary(parcel_level)
# list of variables to keep
vars <- c("ParcelID", "Owner", "City", "Zip", "LotSize", "PropName",
"LandValue", "LandUseValue", "ImprovementsValue",
"TotalValue", "LastSalePrice", "LastSaleDate",
"Subdivision", "Cards"
)
# select listed variables, add variable for source = parcel
parcel <- parcel_level %>%
select(vars) %>%
mutate(source = "parcel")
rm(card_level, parcel_level)
n_distinct(card$TMP)
n_distinct(parcel$ParcelID)
homes <- full_join(card, parcel, by = c("TMP" = "ParcelID"))
# check the result
# records in parcels only
in_parcel <- homes %>%
filter(is.na(source.x)) %>%
select(Owner:Cards)
View(in_parcel)
# many with 0 improvements (or missing), how many?
in_parcel %>%
filter(ImprovementsValue == 0 | is.na(ImprovementsValue)) %>%
tally()
# records in cards only
in_cards <- homes %>%
filter(is.na(source.y)) %>%
select(TMP:TotalRooms)
# keep only records in both cards and parcels
# drop source
homes <- homes %>%
filter(!is.na(source.y) & !is.na(source.x)) %>%
select(-c(source.y, source.x))
# fix names
names(homes) <- tolower(names(homes))
# and make a copy in case we mess something up or want to reference the full set
homes_copy <- homes
rm(in_parcel, in_cards)
table(homes$usecode)
# identify residential home records with usecode
res <- c("Doublewide", "Duplex", "Mobile Homes",
"Rental House", "Single Family", "Single Family-Rental"
)
homes <- homes %>%
filter(usecode %in% res)
# b. examine key variables: totalvalue, finsqft, lotsize
# totalvalue
summary(homes$totalvalue) # 2 NAs, some 0s, and more than 200M at max
homes %>%  # check NAs
filter(is.na(totalvalue)) %>%
select(cardtype, usecode, finsqft, lotsize, landvalue, improvementsvalue, totalvalue)
homes %>% # check 0s
filter(totalvalue == 0) %>%
select(cardtype, usecode, finsqft, lotsize, landvalue, improvementsvalue)
# remove the rows with TotalValue 0 or NA
homes <- homes %>%
filter(!is.na(totalvalue) & totalvalue > 0)
ggplot(homes, aes(x = totalvalue)) + geom_histogram()
ggplot(homes, aes(log(totalvalue))) + geom_histogram()
# finsqft
summary(homes$finsqft) # 9 NAs, some 0s, and up to nearly 20K sqft
tmp <- homes %>% # check NAs (I want to see the full Owner/Name so save in tmp data frame)
filter(is.na(finsqft)) %>%
select(yearbuilt, usecode, finsqft, totalrooms, owner, lotsize, propname, landvalue, improvementsvalue, totalvalue)
tmp <- homes %>% # check 0s
filter(finsqft == 0) %>%
select(yearbuilt, usecode, finsqft, totalrooms, owner, lotsize, propname, landvalue, improvementsvalue, totalvalue) %>%
arrange(desc(improvementsvalue))
# outside of the first 100+, most don't seem to have improvements valued highly enough to be a home (remove below)
# how many with home-priced improvementsvalue?
tmp %>%
filter(improvementsvalue > 75000) %>%
tally()
# check the high end
tmp <- homes %>%
filter(finsqft > 5000) %>%
select(yearbuilt, usecode, finsqft, totalrooms, owner, city, lotsize:totalvalue, cards) %>%
arrange(desc(finsqft)) # limit this, e.g, < 10K
# remove rows with FinSqFt >= 10000
homes <- homes %>%
filter(!is.na(finsqft) & finsqft > 0 & finsqft < 10000)
ggplot(homes, aes(x = finsqft)) + geom_histogram(binwidth = 100)
# lotsize
summary(homes$lotsize)
tmp <- homes %>% # check 0s
filter(lotsize == 0) %>%
arrange(finsqft)
tmp <- homes %>%  # check high end
filter(lotsize > 250) %>%
arrange(desc(lotsize))
# remove records with 2 or more cards associated with parcel
homes <- homes %>%
filter(cards < 2)
ggplot(homes, aes(lotsize)) + geom_histogram()
ggplot(filter(homes, lotsize > 0), aes(log(lotsize))) + geom_histogram()
# yearbuilt
summary(homes$yearbuilt) # check 0s
tmp <- homes %>%
filter(yearbuilt == 0) %>%
arrange(lastsaledate)
# just missing on these; use with caution
ggplot(filter(homes, yearbuilt > 0), aes(x = yearbuilt)) + geom_histogram()
# more likely to use this as age than year, create age of home
homes <- homes %>%
mutate(age = 2016 - yearbuilt)
ggplot(homes, aes(x = age)) + geom_histogram(bins = 100)
# impute median value within city for missing
city_age <- homes %>%
filter(age < 2016) %>%
group_by(city) %>%
summarize(med_age = round(median(age)))
homes <- left_join(homes, city_age, by = "city")
homes <- homes %>%
mutate(age = if_else(age == 2016, med_age, age))
ggplot(homes, aes(x = age)) + geom_histogram(bins = 100)
# condition
table(homes$condition) # reformat as factor
cond_levels <- c("Substandard", "Poor", "Fair", "Average", "Good", "Excellent") # define levels/order
homes <- homes %>%
mutate(condition2 = factor(condition, levels = cond_levels)) # I created a new variable here
summary(homes$condition2)
# redo - recode missing to None and use as a level
cond_levels <- c("None", "Substandard", "Poor", "Fair", "Average", "Good", "Excellent")
homes <- homes %>%
mutate(condition = if_else(is.na(condition), "None", condition),
condition = factor(condition, levels = cond_levels)) %>%
select(-condition2) # remove prior variable
summary(homes$condition)
# city
table(homes$city)
sum(is.na(homes$city)) # 256 missing
# based on mailing address, not jurisdictional boundaries,
# let's keep labels for those with > ~400 records and combine the remainder
homes <- homes %>% mutate(city = fct_explicit_na(city),
city = fct_lump(city, n = 9, other_level = "OTHER"),
city = fct_infreq(city),
city = fct_relevel(city, "OTHER", after = Inf))
table(homes$city)
# cooling, fp_num
table(homes$cooling) # make a factor
homes <- homes %>%
mutate(cooling = factor(cooling, levels = c("No Central Air", "Central Air")))
table(homes$fp_num) # make a binary indicator
homes <- homes %>%
mutate(fp = if_else(fp_num > 0, 1, 0))
# improvementsvalue
summary(homes$improvementsvalue) # no missing, some 0s
# create a tmp file with ImprovementsValue == 0, arrange the file by FinSqFt
txmp <- homes %>%
filter(improvementsvalue == 0) %>%
arrange(finsqft)
# landvalue
summary(homes$landvalue)
homes %>% # check 0s
filter(landvalue == 0) %>%
select(usecode, owner, finsqft, lotsize, improvementsvalue, totalvalue)
# remove the rows with landvalue = 0
homes <- homes %>%
filter(landvalue > 0)
# landusevalue
summary(homes$landusevalue)
homes <- homes %>% # create binary indicator for land use
mutate(landuse = if_else(landusevalue > 0, 1, 0)) %>%
select(-landusevalue) # remove variable
table(homes$landuse)
# cardtype
table(homes$cardtype)
homes %>%
filter(cardtype == "C") %>%
select(yearbuilt, usecode, finsqft, totalrooms, owner, improvementsvalue)
homes <- homes %>% filter(cardtype == "R") %>% # keep only R
select(-cardtype) # and remove column
# usecode
table(homes$usecode) # consider reducing to just single family...
# numstories
table(homes$numstories) # realize I don't know what this means; was expecting 1, 2, 3, etc.. Let's drop it
homes <- homes %>% select(-numstories)
# bedroom, fullbath, halfbath, totalrooms
table(homes$bedroom) # 228 homes with no bedroom seems high, use with caution
table(homes$fullbath) # 263 homes with no full bath seems high, use with caution
table(homes$halfbath) # ok
table(homes$totalrooms) # 1310 homes with no rooms is definitely a coding error, use with caution
# zip
summary(homes$zip) # 256 missing
table(homes$city, homes$zip) # basically replicates City
# subdivision
table(homes$subdivision) # would need more work and understanding to be useful
sum(is.na(homes$subdivision)) # 9,393 missing; is it reasonable to consider these more rural?
homes <- homes %>%
mutate(insub = if_else(is.na(subdivision), 0, 1)) %>%
select(-subdivision)
# lastsaleprice, lastsaledate
summary(homes$lastsaledate)
summary(homes$lastsaleprice)
tmp <- homes %>%
filter(lastsaleprice == 0) %>%
arrange(lastsaledate) # last sale date is prior to year built for many
homes %>%
mutate(datecheck = if_else(yearbuilt > as.integer(year(lastsaledate)), 1, 0)) %>%
filter(datecheck == 1 | yearbuilt == 0) %>%
tally()
## YOUR TURN:
# How many homes were remodeled (yearremodeled)
homes %>% filter(yearremodeled > 0) %>% tally()
# Create a binary variable (remodel) that indicates if a home has been remodeled
homes <- homes %>%
mutate(remodel = if_else(yearremodeled > 0, 1, 0))
################################################
# 6. Clean up and save ----
# remove owner, propname, souce.x, source.y -- these were for examining the data
homes <- homes %>%
select(-c(cardnum, owner, propname, cards))
# remove unneeded objects from environment
rm(tmp, city_age, res, vars, cond_levels)
rm(txmp)
# save everything to working directory
save.image("albemarle_homes.Rdata")
# save just the homes data frame
saveRDS(homes, file = "albemarle_homes.rds")
# save a csv file of the homes data
write_csv(homes, path = "albemarle_homes.csv")
# Does average house size (finsqft) appear related to assessed condition (condition)?
homes %>%
group_by(condition) %>%
summarize(mean(finsqft))
# Find the number of homes remodeled by year (YearRemodeled)
remodels <- homes %>%
filter(yearremodeled > 1800) %>%
group_by(yearremodeled) %>%
summarize(total = n())
ggplot(remodels, aes(x = yearremodeled, y = total)) + geom_line()
## YOUR TURN:
# Does average property value (improvementsvalue) appear related to assessed condition (condition)?
homtes %>%
group_by(condition) %>%
summarize(mean(improvementsvalue))
## YOUR TURN:
# Does average property value (improvementsvalue) appear related to assessed condition (condition)?
homes %>%
group_by(condition) %>%
summarize(mean(improvementsvalue))
# Do median property value (improvementsvalue), land value (landvalue), or
# ... total assesed value (totalvalue) appear related to to city?
homes %>%
group_by(city) %>%
summarize(median(improvementsvalue), median(landvalue), median(totalvalue))
# Do median property value (improvementsvalue), land value (landvalue), or
# ... total assesed value (totalvalue) appear related to to city?
homes %>%
group_by(city) %>%
summarize(median(improvementsvalue), median(landvalue), median(totalvalue)) %>%
arrange(median(totalvalue))
# Do median property value (improvementsvalue), land value (landvalue), or
# ... total assesed value (totalvalue) appear related to to city?
homes %>%
group_by(city) %>%
summarize(median(improvementsvalue), median(landvalue), median(totalvalue)) %>%
arrange(`median(totalvalue)``)
``
# Do median property value (improvementsvalue), land value (landvalue), or
# ... total assesed value (totalvalue) appear related to to city?
homes %>%
group_by(city) %>%
summarize(median(improvementsvalue), median(landvalue), median(totalvalue)) %>%
arrange(`median(totalvalue)`)
# Do median property value (improvementsvalue), land value (landvalue), or
# ... total assesed value (totalvalue) appear related to to city?
homes %>%
group_by(city) %>%
summarize(med_imp = median(improvementsvalue),
med_land = median(landvalue),
med_total = median(totalvalue)) %>%
arrange(med_total)
# Find the proportion of homes remodeled in each city and sort by this proportion
homes %>%
group_by(city) %>%
mutate(prop_remodel = sum(remodel)/n()) %>%
arrange(prop_remodel)
# Find the proportion of homes remodeled in each city and sort by this proportion
homes %>%
group_by(city) %>%
mutate(prop_remodel = sum(remodel)/n()) %>%
arrange(prop_remodel)
# Find the proportion of homes remodeled in each city and sort by this proportion
homes %>%
group_by(city) %>%
mutate(prop_remodel = sum(remodel)/n()) %>%
summarize(mean_remodel = mean(prop_remodel)) %>%
arrange(mean_remodel)
# Find the proportion of homes remodeled in each city
# ... and sort the cities by the average proportion
homes %>%
group_by(city) %>%
summarize(prop_remodel = sum(remodel)/n()) %>%
arrange(mean_remodel)
# Find the proportion of homes remodeled in each city
# ... and sort the cities by the average proportion
homes %>%
group_by(city) %>%
summarize(prop_remodel = sum(remodel)/n()) %>%
arrange(prop_remodel)
# Find the number of homes remodeled by year (yearremodeled)
homes %>%
filter(yearremodeled > 1800) %>%
group_by(yearremodeled) %>%
summarize(total = n())
remodels <- homes %>%
filter(yearremodeled > 1800) %>%
count(yearremodeled)
# If you save the above summary to a data frame (remodels), you can plot it!
ggplot(remodels, aes(x = yearremodeled, y = total)) + geom_line()
# Find the number of homes remodeled by year (yearremodeled)
# ... save this to a data frame and call the count of remodeled homes "remodels"
remodels <- homes %>%
filter(yearremodeled > 1800) %>%
group_by(yearremodeled) %>%
summarize(remodels = n())
# Plot the result
ggplot(remodels, aes(x = yearremodeled, y = remodels)) + geom_line()
?annotate
# Plot the result
ggplot(remodels, aes(x = yearremodeled, y = remodels)) + geom_line()
# What are the peak years?
remodels %>%
filter(remodels > 100)
# Find the number of homes remodeled by year (yearremodeled)
# ... save this to a data frame and call the count of remodeled homes "year_count"
remodels <- homes %>%
filter(yearremodeled > 1800) %>%
group_by(yearremodeled) %>%
summarize(year_count = n())
# Plot the result
ggplot(remodels, aes(x = yearremodeled, y = year_count)) + geom_line()
# What are the peak years?
remodels %>%
filter(year_count > 100)
